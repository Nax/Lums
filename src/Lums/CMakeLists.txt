find_package(OpenGL REQUIRED)
find_package(Vulkan REQUIRED)

add_compile_definitions("$<$<CONFIG:DEBUG>:DEBUG=1>")

function (lums_module dir)
  cmake_parse_arguments(LUMS_MODULE "" "" "LINK" ${ARGN})
  if (NOT MSVC)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -fomit-frame-pointer -fstrict-aliasing")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -fomit-frame-pointer -fstrict-aliasing -fno-exceptions -fno-rtti")
  else()
    string(REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/W[0-4]" "/W3" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHs-c- /GR-")
    add_definitions(-D_HAS_EXCEPTIONS=0 -D_CRT_SECURE_NO_WARNINGS=1)
  endif()

  if (APPLE)
    add_definitions(-DGL_SILENCE_DEPRECATION=1)
  endif()

  set(target "Lums${dir}")
  string(TOUPPER "${dir}" var)

  file(GLOB_RECURSE sources "${dir}/*.cpp")
  file(GLOB_RECURSE sources_win32 "${dir}/Win32/*.cpp")
  file(GLOB_RECURSE sources_macos "${dir}/MacOS/*.cpp" "${dir}/MacOS/*.m" "${dir}/MacOS/*.mm")
  file(GLOB_RECURSE sources_linux "${dir}/Linux/*.cpp")
  file(GLOB_RECURSE sources_unix "${dir}/Unix/*.cpp")

  list(REMOVE_ITEM sources ${sources_win32} ${sources_macos} ${sources_linux} ${sources_unix})
  if (WIN32)
    list(APPEND sources ${sources_win32})
  elseif(APPLE)
    list(APPEND sources ${sources_macos} ${sources_unix})
  elseif(UNIX AND NOT APPLE)
    list(APPEND sources ${sources_linux} ${sources_unix})
  endif()

  add_library(${target} SHARED ${sources})
  target_compile_definitions("${target}" PRIVATE "LUMS_BUILD_${var}=1")
  if (WIN32)
    target_compile_definitions("${target}" PRIVATE WIN32_LEAN_AND_MEAN=1 VC_EXTRALEAN=1 UNICODE=1)
  endif()

  if (NOT "${LUMS_MODULE_LINK}" STREQUAL "")
    target_link_libraries(${target} ${LUMS_MODULE_LINK})
  endif()
endfunction()

if (APPLE)
  set(LUMS_WINDOW_DEPS "-framework Cocoa")
else()
  set(LUMS_WINDOW_DEPS "")
endif()

lums_module(IO)
lums_module(Window LINK ${LUMS_WINDOW_DEPS})
lums_module(OpenGL LINK OpenGL::GL)
lums_module(Draw LINK LumsWindow LumsOpenGL Vulkan::Vulkan)
