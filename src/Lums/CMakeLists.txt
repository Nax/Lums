find_package(Threads REQUIRED)
set(LIBS Threads::Threads)

if (APPLE)
  set(SUPPORTED_RENDERERS "OpenGL;Metal")
  list(APPEND LIBS "-framework Cocoa")
elseif (WIN32)
  set(SUPPORTED_RENDERERS "OpenGL;Vulkan;Direct3D")
else()
  set(SUPPORTED_RENDERERS "OpenGL;Vulkan")
endif()

if ("OpenGL" IN_LIST SUPPORTED_RENDERERS)
  option(USE_OPENGL "Compile in support for OpenGL" ON)
endif()
if ("Vulkan" IN_LIST SUPPORTED_RENDERERS)
  option(USE_VULKAN "Compile in support for Vulkan" ON)
endif()
if ("Metal" IN_LIST SUPPORTED_RENDERERS)
  option(USE_METAL "Compile in support for Metal" ON)
endif()
if ("Direct3D" IN_LIST SUPPORTED_RENDERERS)
  option(USE_DIRECT3D "Compile in support for Direct3D" ON)
endif()

if (USE_OPENGL)
  find_package(OpenGL REQUIRED)
  list(APPEND LIBS OpenGL::GL)
  add_compile_definitions(USE_OPENGL=1)
endif()

if (USE_VULKAN)
  find_package(Vulkan REQUIRED)
  add_compile_definitions(USE_VULKAN=1)
endif()

if (USE_METAL)
  add_compile_definitions(USE_METAL=1)
endif()

if (NOT MSVC)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -fomit-frame-pointer -fstrict-aliasing")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -fomit-frame-pointer -fstrict-aliasing -fno-exceptions -fno-rtti")
else()
  string(REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  string(REGEX REPLACE "/W[0-4]" "/W3" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  string(REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHs-c- /GR-")
  add_compile_definitions(_HAS_EXCEPTIONS=0)
endif()

if (APPLE)
  add_compile_definitions(GL_SILENCE_DEPRECATION=1)
elseif (WIN32)
  add_compile_definitions(_CRT_SECURE_NO_WARNINGS=1 UNICODE=1 _UNICODE=1 WIN32_LEAN_AND_MEAN=1 VC_EXTRALEAN=1)
endif()

add_compile_definitions("$<$<CONFIG:DEBUG>:DEBUG=1>")

file(GLOB_RECURSE SOURCES "*.cpp" "*.mm" "*.h")
if (NOT WIN32)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)(.*)Win32")
endif()
if (NOT APPLE)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)(.*)MacOS")
endif()
if (NOT UNIX OR APPLE)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)(.*)Linux")
endif()
if (NOT UNIX)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)(.*)Unix")
endif()
if (NOT USE_OPENGL)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)Draw(/|\\\\)(.*)OpenGL")
endif()
if (NOT USE_VULKAN)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)Draw(/|\\\\)(.*)Vulkan")
endif()
if (NOT USE_METAL)
  list(FILTER SOURCES EXCLUDE REGEX "Lums(/|\\\\)Draw(/|\\\\)(.*)Metal")
endif()

add_library(Lums SHARED ${SOURCES})
target_link_libraries(Lums ${LIBS})
target_include_directories(Lums PUBLIC "${PROJECT_SOURCE_DIR}/include" PRIVATE "${PROJECT_SOURCE_DIR}/src")
